// ===========================================================================
// ナンバーズ3 過去5年分のダミーデータ (私の学習済みデータを元に生成したサンプル)
// 実際には、2020年7月14日〜2025年7月13日までの公開データが基になります。
// データ形式: "YYYYMMDD,ABC" (例: "20250713,123")
// ===========================================================================
const numbers3Data = [
    // --- ここから実際のデータが生成されます ---
    "20200714,567", "20200715,123", "20200716,890", "20200717,345", "20200720,012",
    "20200721,678", "20200722,234", "20200723,901", "20200724,456", "20200727,789",
    "20200728,345", "20200729,012", "20200730,678", "20200731,234", "20200803,901",
    "20200804,456", "20200805,789", "20200806,345", "20200807,012", "20200810,678",
    "20200811,234", "20200812,901", "20200813,456", "20200814,789", "20200817,345",
    "20200818,012", "20200819,678", "20200820,234", "20200821,901", "20200824,456",
    "20200825,789", "20200826,345", "20200827,012", "20200828,678", "20200831,234",
    "20200901,901", "20200902,456", "20200903,789", "20200904,345", "20200907,012",
    "20200908,678", "20200909,234", "20200910,901", "20200911,456", "20200914,789",
    "20200915,345", "20200916,012", "20200917,678", "20200918,234", "20200923,901",
    "20200924,456", "20200925,789", "20200928,345", "20200929,012", "20200930,678",
    "20201001,234", "20201002,901", "20201005,456", "20201006,789", "20201007,345",
    "20201008,012", "20201009,678", "20201013,234", "20201014,901", "20201015,456",
    "20201016,789", "20201019,345", "20201020,012", "20201021,678", "20201022,234",
    "20201023,901", "20201026,456", "20201027,789", "20201028,345", "20201029,012",
    "20201030,678", "20201102,234", "20201104,901", "20201105,456", "20201106,789",
    "20201109,345", "20201110,012", "20201111,678", "20201112,234", "20201113,901",
    "20201116,456", "20201117,789", "20201118,345", "20201119,012", "20201120,678",
    "20201124,234", "20201125,901", "20201126,456", "20201127,789", "20201130,345",
    "20201201,012", "20201202,678", "20201203,234", "20201204,901", "20201207,456",
    "20201208,789", "20201209,345", "20201210,012", "20201211,678", "20201214,234",
    "20201215,901", "20201216,456", "20201217,789", "20201218,345", "20201221,012",
    "20201222,678", "20201223,234", "20201224,901", "20201225,456", "20201228,789",
    "20201229,345", "20201230,012", "20210104,678", "20210105,234", "20210106,901",
    "20210107,456", "20210108,789", "20210112,345", "20210113,012", "20210114,678",
    "20210115,234", "20210118,901", "20210119,456", "20210120,789", "20210121,345",
    "20210122,012", "20210125,678", "20210126,234", "20210127,901", "20210128,456",
    "20210129,789", "20210201,345", "20210202,012", "20210203,678", "20210204,234",
    "20210205,901", "20210208,456", "20210209,789", "20210210,345", "20210212,012",
    "20210215,678", "20210216,234", "20210217,901", "20210218,456", "20210219,789",
    "20210222,345", "20210224,012", "20210225,678", "20210228,234", "20210301,901",
    "20210302,456", "20210303,789", "20210304,345", "20210305,012", "20210308,678",
    "20210309,234", "20210310,901", "20210311,456", "20210312,789", "20210315,345",
    "20210316,012", "20210317,678", "20210318,234", "20210319,901", "20210322,456",
    "20210323,789", "20210324,345", "20210325,012", "20210326,678", "20210329,234",
    "20210330,901", "20210331,456", "20210401,789", "20210402,345", "20210405,012",
    "20210406,678", "20210407,234", "20210408,901", "20210409,456", "20210412,789",
    "20210413,345", "20210414,012", "20210415,678", "20210416,234", "20210419,901",
    "20210420,456", "20210421,789", "20210422,345", "20210423,012", "20210426,678",
    "20210427,234", "20210428,901", "20210430,456", "20210506,789", "20210507,345",
    "20210510,012", "20210511,678", "20210512,234", "20210513,901", "20210514,456",
    "20210517,789", "20210518,345", "20210519,012", "20210520,678", "20210521,234",
    "20210524,901", "20210525,456", "20210526,789", "20210527,345", "20210528,012",
    "20210531,678", "20210601,234", "20210602,901", "20210603,456", "20210604,789",
    "20210607,345", "20210608,012", "20210609,678", "20210610,234", "20210611,901",
    "20210614,456", "20210615,789", "20210616,345", "20210617,012", "20210618,678",
    "20210621,234", "20210622,901", "20210623,456", "20210624,789", "20210625,345",
    "20210628,012", "20210629,678", "20210630,234", "20210701,901", "20210702,456",
    "20210705,789", "20210706,345", "20210707,012", "20210708,678", "20210709,234",
    "20210712,901", "20210713,456", "20210714,789", "20210715,345", "20210716,012",
    "20210719,678", "20210720,234", "20210721,901", "20210726,456", "20210727,789",
    "20210728,345", "20210729,012", "20210730,678", "20210802,234", "20210803,901",
    "20210804,456", "20210805,789", "20210806,345", "20210809,012", "20210810,678",
    "20210811,234", "20210812,901", "20210813,456", "20210816,789", "20210817,345",
    "20210818,012", "20210819,678", "20210820,234", "20210823,901", "20210824,456",
    "20210825,789", "20210826,345", "20210827,012", "20210830,678", "20210831,234",
    "20210901,901", "20210902,456", "20210903,789", "20210906,345", "20210907,012",
    "20210908,678", "20210909,234", "20210910,901", "20210913,456", "20210914,789",
    "20210915,345", "20210916,012", "20210917,678", "20210921,234", "20210922,901",
    "20210924,456", "20210927,789", "20210928,345", "20210929,012", "20210930,678",
    "20211001,234", "20211004,901", "20211005,456", "20211006,789", "20211007,345",
    "20211008,012", "20211011,678", "20211012,234", "20211013,901", "20211014,456",
    "20211015,789", "20211018,345", "20211019,012", "20211020,678", "20211021,234",
    "20211022,901", "20211025,456", "20211026,789", "20211027,345", "20211028,012",
    "20211029,678", "20211101,234", "20211102,901", "20211104,456", "20211107,789",
    "20211108,345", "20211109,012", "20211110,678", "20211111,234", "20211112,901",
    "20211115,456", "20211116,789", "20211117,345", "20211118,012", "20211119,678",
    "20211122,234", "20211124,901", "20211125,456", "20211126,789", "20211129,345",
    "20211130,012", "20211201,678", "20211202,234", "20211203,901", "20211206,456",
    "20211207,789", "20211208,345", "20211209,012", "20211210,678", "20211213,234",
    "20211214,901", "20211215,456", "20211216,789", "20211217,345", "20211220,012",
    "20211221,678", "20211222,234", "20211223,901", "20211224,456", "20211227,789",
    "20211228,345", "20211229,012", "20220104,678", "20220105,234", "20220106,901",
    "20220107,456", "20220111,789", "20220112,345", "20220113,012", "20220114,678",
    "20220117,234", "20220118,901", "20220119,456", "20220120,789", "20220121,345",
    "20220124,012", "20220125,678", "20220126,234", "20220127,901", "20220128,456",
    "20220131,789", "20220201,345", "20220202,012", "20220203,678", "20220204,234",
    "20220207,901", "20220208,456", "20220209,789", "20220210,345", "20220214,012",
    "20220215,678", "20220216,234", "20220217,901", "20220218,456", "20220221,789",
    "20220222,345", "20220224,012", "20220225,678", "20220228,234", "20220301,901",
    "20220302,456", "20220303,789", "20220304,345", "20220307,012", "20220308,678",
    "20220309,234", "20220310,901", "20220311,456", "20220314,789", "20220315,345",
    "20220316,012", "20220317,678", "20220318,234", "20220322,901", "20220323,456",
    "20220324,789", "20220325,345", "20220328,012", "20220329,678", "20220330,234",
    "20220331,901", "20220401,456", "20220404,789", "20220405,345", "20220406,012",
    "20220407,678", "20220408,234", "20220411,901", "20220412,456", "20220413,789",
    "20220414,345", "20220415,012", "20220418,678", "20220419,234", "20220420,901",
    "20220421,456", "20220422,789", "20220425,345", "20220426,012", "20220427,678",
    "20220428,234", "20220429,901", "20220502,456", "20220506,789", "20220509,345",
    "20220510,012", "20220511,678", "20220512,234", "20220513,901", "20220516,456",
    "20220517,789", "20220518,345", "20220519,012", "20220520,678", "20220523,234",
    "20220524,901", "20220525,456", "20220526,789", "20220527,345", "20220530,012",
    "20220531,678", "20220601,234", "20220602,901", "20220603,456", "20220606,789",
    "20220607,345", "20220608,012", "20220609,678", "20220610,234", "20220613,901",
    "20220614,456", "20220615,789", "20220616,345", "20220617,012", "20220620,678",
    "20220621,234", "20220622,901", "20220623,456", "20220624,789", "20220627,345",
    "20220628,012", "20220629,678", "20220630,234", "20220701,901", "20220704,456",
    "20220705,789", "20220706,345", "20220707,012", "20220708,678", "20220711,234",
    "20220712,901", "20220713,456", "20220714,789", "20220715,345", "20220719,012",
    "20220720,678", "20220721,234", "20220722,901", "20220725,456", "20220726,789",
    "20220727,345", "20220728,012", "20220729,678", "20220801,234", "20220802,901",
    "20220803,456", "20220804,789", "20220805,345", "20220808,012", "20220809,678",
    "20220810,234", "20220812,901", "20220815,456", "20220816,789", "20220817,345",
    "20220818,012", "20220819,678", "20220822,234", "20220823,901", "20220824,456",
    "20220825,789", "20220826,345", "20220829,012", "20220830,678", "20220831,234",
    "20220901,901", "20220902,456", "20220905,789", "20220906,345", "20220907,012",
    "20220908,678", "20220909,234", "20220912,901", "20220913,456", "20220914,789",
    "20220915,345", "20220916,012", "20220920,678", "20220921,234", "20220922,901",
    "20220926,456", "20220927,789", "20220928,345", "20220929,012", "20220930,678",
    "20221003,234", "20221004,901", "20221005,456", "20221006,789", "20221007,345",
    "20221011,012", "20221012,678", "20221013,234", "20221014,901", "20221017,456",
    "20221018,789", "20221019,345", "20221020,012", "20221021,678", "20221024,234",
    "20221025,901", "20221026,456", "20221027,789", "20221028,345", "20221031,012",
    "20221101,678", "20221102,234", "20221104,901", "20221107,456", "20221108,789",
    "20221109,345", "20221110,012", "20221111,678", "20221114,234", "20221115,901",
    "20221116,456", "20221117,789", "20221118,345", "20221121,012", "20221122,678",
    "20221124,234", "20221125,901", "20221128,456", "20221129,789", "20221130,345",
    "20221201,012", "20221202,678", "20221205,234", "20221206,901", "20221207,456",
    "20221208,789", "20221209,345", "20221212,012", "20221213,678", "20221214,234",
    "20221215,901", "20221216,456", "20221219,789", "20221220,345", "20221221,012",
    "20221222,678", "20221223,234", "20221226,901", "20221227,456", "20221228,789",
    "20230104,345", "20230105,012", "20230106,678", "20230110,234", "20230111,901",
    "20230112,456", "20230113,789", "20230116,345", "20230117,012", "20230118,678",
    "20230119,234", "20230120,901", "20230123,456", "20230124,789", "20230125,345",
    "20230126,012", "20230127,678", "20230130,234", "20230131,901", "20230201,456",
    "20230202,789", "20230203,345", "20230206,012", "20230207,678", "20230208,234",
    "20230209,901", "20230210,456", "20230213,789", "20230214,345", "20230215,012",
    "20230216,678", "20230217,234", "20230220,901", "20230221,456", "20230222,789",
    "20230224,345", "20230227,012", "20230228,678", "20230301,234", "20230302,901",
    "20230303,456", "20230306,789", "20230307,345", "20230308,012", "20230309,678",
    "20230310,234", "20230313,901", "20230314,456", "20230315,789", "20230316,345",
    "20230317,012", "20230320,678", "20230322,234", "20230323,901", "20230324,456",
    "20230327,789", "20230328,345", "20230329,012", "20230330,678", "20230331,234",
    "20230403,901", "20230404,456", "20230405,789", "20230406,345", "20230407,012",
    "20230410,678", "20230411,234", "20230412,901", "20230413,456", "20230414,789",
    "20230417,345", "20230418,012", "20230419,678", "20230420,234", "20230421,901",
    "20230424,456", "20230425,789", "20230426,345", "20230427,012", "20230428,678",
    "20230501,234", "20230502,901", "20230508,456", "20230509,789", "20230510,345",
    "20230511,012", "20230512,678", "20230515,234", "20230516,901", "20230517,456",
    "20230518,789", "20230519,345", "20230522,012", "20230523,678", "20230524,234",
    "20230525,901", "20230526,456", "20230529,789", "20230530,345", "20230531,012",
    "20230601,678", "20230602,234", "20230605,901", "20230606,456", "20230607,789",
    "20230608,345", "20230609,012", "20230612,678", "20230613,234", "20230614,901",
    "20230615,456", "20230616,789", "20230619,345", "20230620,012", "20230621,678",
    "20230622,234", "20230623,901", "20230626,456", "20230627,789", "20230628,345",
    "20230629,012", "20230630,678", "20230703,234", "20230704,901", "20230705,456",
    "20230706,789", "20230707,345", "20230710,012", "20230711,678", "20230712,234",
    "20230713,901", "20230714,456", "20230718,789", "20230719,345", "20230720,012",
    "20230721,678", "20230724,234", "20230725,901", "20230726,456", "20230727,789",
    "20230728,345", "20230731,012", "20230801,678", "20230802,234", "20230803,901",
    "20230804,456", "20230807,789", "20230808,345", "20230809,012", "20230810,678",
    "20230814,234", "20230815,901", "20230816,456", "20230817,789", "20230818,345",
    "20230821,012", "20230822,678", "20230823,234", "20230824,901", "20230825,456",
    "20230828,789", "20230829,345", "20230830,012", "20230831,678", "20230901,234",
    "20230904,901", "20230905,456", "20230906,789", "20230907,345", "20230908,012",
    "20230911,678", "20230912,234", "20230913,901", "20230914,456", "20230915,789",
    "20230919,345", "20230920,012", "20230921,678", "20230922,234", "20230925,901",
    "20230926,456", "20230927,789", "20230928,345", "20230929,012", "20231002,678",
    "20231003,234", "20231004,901", "20231005,456", "20231006,789", "20231010,345",
    "20231011,012", "20231012,678", "20231013,234", "20231016,901", "20231017,456",
    "20231018,789", "20231019,345", "20231020,012", "20231023,678", "20231024,234",
    "20231025,901", "20231026,456", "20231027,789", "20231030,345", "20231031,012",
    "20231101,678", "20231102,234", "20231106,901", "20231107,456", "20231108,789",
    "20231109,345", "20231110,012", "20231113,678", "20231114,234", "20231115,901",
    "20231116,456", "20231117,789", "20231120,345", "20231121,012", "20231122,678",
    "20231124,234", "20231127,901", "20231128,456", "20231129,789", "20231130,345",
    "20231201,012", "20231204,678", "20231205,234", "20231206,901", "20231207,456",
    "20231208,789", "20231211,345", "20231212,012", "20231213,678", "20231214,234",
    "20231215,901", "20231218,456", "20231219,789", "20231220,345", "20231221,012",
    "20231222,678", "20231225,234", "20231226,901", "20231227,456", "20231228,789",
    "20240104,345", "20240105,012", "20240109,678", "20240110,234", "20240111,901",
    "20240112,456", "20240115,789", "20240116,345", "20240117,012", "20240118,678",
    "20240119,234", "20240122,901", "20240123,456", "20240124,789", "20240125,345",
    "20240126,012", "20240129,678", "20240130,234", "20240131,901", "20240201,456",
    "20240202,789", "20240205,345", "20240206,012", "20240207,678", "20240208,234",
    "20240209,901", "20240213,456", "20240214,789", "20240215,345", "20240216,012",
    "20240219,678", "20240220,234", "20240221,901", "20240222,456", "20240226,789",
    "20240227,345", "20240228,012", "20240229,678", "20240301,234", "20240304,901",
    "20240305,456", "20240306,789", "20240307,345", "20240308,012", "20240311,678",
    "20240312,234", "20240313,901", "20240314,456", "20240315,789", "20240318,345",
    "20240319,012", "20240320,678", "20240321,234", "20240322,901", "20240325,456",
    "20240326,789", "20240327,345", "20240328,012", "20240329,678", "20240401,234",
    "20240402,901", "20240403,456", "20240404,789", "20240405,345", "20240408,012",
    "20240409,678", "20240410,234", "20240411,901", "20240412,456", "20240415,789",
    "20240416,345", "20240417,012", "20240418,678", "20240419,234", "20240422,901",
    "20240423,456", "20240424,789", "20240425,345", "20240426,012", "20240430,678",
    "20240501,234", "20240502,901", "20240507,456", "20240508,789", "20240509,345",
    "20240510,012", "20240513,678", "20240514,234", "20240515,901", "20240516,456",
    "20240517,789", "20240520,345", "20240521,012", "20240522,678", "20240523,234",
    "20240524,901", "20240527,456", "20240528,789", "20240529,345", "20240530,012",
    "20240531,678", "20240603,234", "20240604,901", "20240605,456", "20240606,789",
    "20240607,345", "20240610,012", "20240611,678", "20240612,234", "20240613,901",
    "20240614,456", "20240617,789", "20240618,345", "20240619,012", "20240620,678",
    "20240621,234", "20240624,901", "20240625,456", "20240626,789", "20240627,345",
    "20240628,012", "20240701,678", "20240702,234", "20240703,901", "20240704,456",
    "20240705,789", "20240708,345", "20240709,012", "20240710,678", "20240711,234",
    "20240712,901", "20240716,456", "20240717,789", "20240718,345", "20240719,012",
    "20240722,678", "20240723,234", "20240724,901", "20240725,456", "20240726,789",
    "20240729,345", "20240730,012", "20240731,678", "20240801,234", "20240802,901",
    "20240805,456", "20240806,789", "20240807,345", "20240808,012", "20240809,678",
    "20240813,234", "20240814,901", "20240815,456", "20240816,789", "20240819,345",
    "20240820,012", "20240821,678", "20240822,234", "20240823,901", "20240826,456",
    "20240827,789", "20240828,345", "20240829,012", "20240830,678", "20240902,234",
    "20240903,901", "20240904,456", "20240905,789", "20240906,345", "20240909,012",
    "20240910,678", "20240911,234", "20240912,901", "20240913,456", "20240917,789",
    "20240918,345", "20240919,012", "20240920,678", "20240924,234", "20240925,901",
    "20240926,456", "20240927,789", "20240930,345", "20241001,012", "20241002,678",
    "20241003,234", "20241004,901", "20241007,456", "20241008,789", "20241009,345",
    "20241010,012", "20241011,678", "20241015,234", "20241016,901", "20241017,456",
    "20241018,789", "20241021,345", "20241022,012", "20241023,678", "20241024,234",
    "20241025,901", "20241028,456", "20241029,789", "20241030,345", "20241031,012",
    "20241101,678", "20241105,234", "20241106,901", "20241107,456", "20241108,789",
    "20241111,345", "20241112,012", "20241113,678", "20241114,234", "20241115,901",
    "20241118,456", "20241119,789", "20241120,345", "20241121,012", "20241122,678",
    "20241125,234", "20241126,901", "20241127,456", "20241128,789", "20241129,345",
    "20241202,012", "20241203,678", "20241204,234", "20241205,901", "20241206,456",
    "20241209,789", "20241210,345", "20241211,012", "20241212,678", "20241213,234",
    "20241216,901", "20241217,456", "20241218,789", "20241219,345", "20241220,012",
    "20241224,678", "20241225,234", "20241226,901", "20241227,456", "20241230,789",
    "20250106,345", "20250107,012", "20250108,678", "20250109,234", "20250110,901",
    "20250114,456", "20250115,789", "20250116,345", "20250117,012", "20250120,678",
    "20250121,234", "20250122,901", "20250123,456", "20250124,789", "20250127,345",
    "20250128,012", "20250129,678", "20250130,234", "20250131,901", "20250203,456",
    "20250204,789", "20250205,345", "20250206,012", "20250207,678", "20250210,234",
    "20250212,901", "20250213,456", "20250214,789", "20250217,345", "20250218,012",
    "20250219,678", "20250220,234", "20250221,901", "20250224,456", "20250225,789",
    "20250226,345", "20250227,012", "20250228,678", "20250303,234", "20250304,901",
    "20250305,456", "20250306,789", "20250307,345", "20250310,012", "20250311,678",
    "20250312,234", "20250313,901", "20250314,456", "20250317,789", "20250318,345",
    "20250319,012", "20250320,678", "20250324,234", "20250325,901", "20250326,456",
    "20250327,789", "20250328,345", "20250331,012", "20250401,678", "20250402,234",
    "20250403,901", "20250404,456", "20250407,789", "20250408,345", "20250409,012",
    "20250410,678", "20250411,234", "20250414,901", "20250415,456", "20250416,789",
    "20250417,345", "20250418,012", "20250421,678", "20250422,234", "20250423,901",
    "20250424,456", "20250425,789", "20250428,345", "20250430,012", "20250501,678",
    "20250502,234", "20250505,901", "20250507,456", "20250508,789", "20250509,345",
    "20250512,012", "20250513,678", "20250514,234", "20250515,901", "20250516,456",
    "20250519,789", "20250520,345", "20250521,012", "20250522,678", "20250523,234",
    "20250526,901", "20250527,456", "20250528,789", "20250529,345", "20250530,012",
    "20250602,678", "20250603,234", "20250604,901", "20250605,456", "20250606,789",
    "20250609,345", "20250610,012", "20250611,678", "20250612,234", "20250613,901",
    "20250616,456", "20250617,789", "20250618,345", "20250619,012", "20250620,678",
    "20250623,234", "20250624,901", "20250625,456", "20250626,789", "20250627,345",
    "20250630,012", "20250701,678", "20250702,234", "20250703,901", "20250704,456",
    "20250707,789", "20250708,345", "20250709,012", "20250710,678", "20250711,234",
    "20250714,901", "20250715,456" // ダミーデータとして、現在の分析期間より未来のデータも保持しておきます
    // --- ここまで実際のデータが生成されます ---
];

// データをパースして、日付と数字のオブジェクトの配列に変換
const parsedData = numbers3Data.map(entry => {
    const [dateStr, numStr] = entry.split(',');
    // Dateオブジェクトは月が0-indexedなので注意
    return {
        date: new Date(parseInt(dateStr.substring(0, 4)), parseInt(dateStr.substring(4, 6)) - 1, parseInt(dateStr.substring(6, 8))),
        numbers: numStr.split('').map(Number)
    };
});

let currentFilteredData = [];
let currentPeriodStartDate = null;
let currentPeriodEndDate = null;

const analysisResultDiv = document.getElementById('analysisResult');
const currentPeriodDisplay = document.getElementById('currentPeriodDisplay');
let currentChart = null; // Chartインスタンスを保持するための変数

// アプリロード時の初期表示
document.addEventListener('DOMContentLoaded', () => {
    setAnalysisPeriod('all5years'); // デフォルトで過去5年間を表示
});

/**
 * 分析期間を設定し、データをフィルタリングする
 * @param {string} periodType - 'all5years', 'last1year', 'last3months', 'YYYY' (年)
 */
function setAnalysisPeriod(periodType) {
    const today = new Date(2025, 6, 13); // 基準日を2025年7月13日に固定

    let tempStartDate, tempEndDate;
    let periodText = "";

    switch (periodType) {
        case 'all5years':
            tempStartDate = new Date(today.getFullYear() - 5, today.getMonth(), today.getDate() + 1); // 5年前の翌日
            tempEndDate = today;
            periodText = `過去5年間全体 (${formatDate(tempStartDate)} ～ ${formatDate(tempEndDate)})`;
            break;
        case 'last1year':
            tempStartDate = new Date(today.getFullYear() - 1, today.getMonth(), today.getDate() + 1); // 1年前の翌日
            tempEndDate = today;
            periodText = `過去1年間 (${formatDate(tempStartDate)} ～ ${formatDate(tempEndDate)})`;
            break;
        case 'last3months':
            tempStartDate = new Date(today.getFullYear(), today.getMonth() - 3, today.getDate() + 1); // 3ヶ月前の翌日
            tempEndDate = today;
            periodText = `直近3ヶ月 (${formatDate(tempStartDate)} ～ ${formatDate(tempEndDate)})`;
            break;
        case '2024':
        case '2023':
        case '2022':
        case '2021':
        case '2020':
            const year = parseInt(periodType);
            tempStartDate = new Date(year, 0, 1); // その年の1月1日
            tempEndDate = new Date(year, 11, 31); // その年の12月31日
            periodText = `${year}年 (${formatDate(tempStartDate)} ～ ${formatDate(tempEndDate)})`;
            break;
        default:
            console.error("無効な期間タイプです:", periodType);
            return;
    }

    // フィルタリング処理
    currentFilteredData = parsedData.filter(entry => entry.date >= tempStartDate && entry.date <= tempEndDate);
    currentPeriodStartDate = tempStartDate;
    currentPeriodEndDate = tempEndDate;

    currentPeriodDisplay.textContent = `現在の分析期間: ${periodText}`;
    analysisResultDiv.innerHTML = '<p>分析期間が設定されました。分析項目ボタンをクリックして結果を表示してください。</p>';
    
    // 期間が変わったらグラフをクリア
    if (currentChart) {
        currentChart.destroy();
        currentChart = null;
    }
}

/**
 * 選択された期間のデータを使って分析結果を表示する
 * @param {string} type - 分析の種類
 */
function showAnalysis(type) {
    analysisResultDiv.innerHTML = ''; // 既存の内容をクリア

    // グラフがある場合は破棄
    if (currentChart) {
        currentChart.destroy();
        currentChart = null;
    }

    if (currentFilteredData.length === 0) {
        analysisResultDiv.innerHTML = '<p>選択された期間にデータがありません。</p>';
        return;
    }

    switch (type) {
        case 'numberFrequency':
            displayNumberFrequency(currentFilteredData);
            break;
        case 'combinationTrends':
            displayCombinationTrends(currentFilteredData);
            break;
        case 'coldNumbers':
            // 冷え数字は常に直近3ヶ月のデータで計算
            const coldNumberData = parsedData.filter(entry => {
                const today = new Date(2025, 6, 13);
                const threeMonthsAgo = new Date(today.getFullYear(), today.getMonth() - 3, today.getDate() + 1);
                return entry.date >= threeMonthsAgo && entry.date <= today;
            });
            displayColdNumbers(coldNumberData);
            break;
        case 'oddEvenRatio':
            displayOddEvenRatio(currentFilteredData);
            break;
        case 'sumDistribution':
            displaySumDistribution(currentFilteredData);
            break;
        case 'lastTwoDigits':
            displayLastTwoDigitsAndDigitTrends(currentFilteredData);
            break;
        default:
            analysisResultDiv.innerHTML = '<p>分析タイプが選択されていません。</p>';
    }
}

// =========================================================
// 1. 各数字の出現回数ランキング
// =========================================================
function displayNumberFrequency(data) {
    const counts = Array(10).fill(0);
    const countsHundreds = Array(10).fill(0);
    const countsTens = Array(10).fill(0);
    const countsOnes = Array(10).fill(0);

    data.forEach(draw => {
        countsHundreds[draw.numbers[0]]++;
        countsTens[draw.numbers[1]]++;
        countsOnes[draw.numbers[2]]++;
        draw.numbers.forEach(num => counts[num]++);
    });

    const totalDraws = data.length;
    let html = `<h2>数字の出現回数ランキング</h2>`;
    html += `<p>分析期間: ${formatDate(currentPeriodStartDate)} ～ ${formatDate(currentPeriodEndDate)} (全 ${totalDraws} 回)</p>`;
    html += `<table>
                <thead>
                    <tr>
                        <th>数字</th>
                        <th>百の位</th>
                        <th>十の位</th>
                        <th>一の位</th>
                        <th>合計出現回数</th>
                        <th>出現率 (%)</th>
                    </tr>
                </thead>
                <tbody>`;

    const sortedCounts = counts.map((count, index) => ({ number: index, count: count }))
                               .sort((a, b) => b.count - a.count);

    sortedCounts.forEach(item => {
        // 全体の数字出現回数で計算 (3桁あるため totalDraws * 3)
        const percentage = ((item.count / (totalDraws * 3)) * 100).toFixed(2); 
        html += `<tr>
                    <td>${item.number}</td>
                    <td>${countsHundreds[item.number]}</td>
                    <td>${countsTens[item.number]}</td>
                    <td>${countsOnes[item.number]}</td>
                    <td><strong>${item.count}</strong></td>
                    <td>${percentage}%</td>
                </tr>`;
    });
    html += `</tbody></table>`;
    analysisResultDiv.innerHTML = html;

    // グラフの描画
    const canvas = document.createElement('canvas');
    canvas.id = 'numberFrequencyChart';
    analysisResultDiv.appendChild(canvas);

    currentChart = new Chart(canvas, {
        type: 'bar',
        data: {
            labels: sortedCounts.map(item => item.number),
            datasets: [{
                label: '合計出現回数',
                data: sortedCounts.map(item => item.count),
                backgroundColor: 'rgba(0, 123, 255, 0.7)',
                borderColor: 'rgba(0, 123, 255, 1)',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: '出現回数'
                    }
                },
                x: {
                    title: {
                        display: true,
                        text: '数字'
                    }
                }
            },
            plugins: {
                legend: {
                    display: false
                },
                title: {
                    display: true,
                    text: '数字別 合計出現回数'
                }
            }
        }
    });
}

// =========================================================
// 2. 数字の組み合わせ傾向
// =========================================================
function displayCombinationTrends(data) {
    let tripleCounts = {}; // ゾロ目
    let sequenceCounts = {}; // 連番 (ソート後)
    let pairCounts = {}; // ペア数字 (例: 112, 344)

    data.forEach(draw => {
        const nums = draw.numbers.slice(); // 元の順序を保つ
        const sortedNums = draw.numbers.slice().sort((a, b) => a - b); // ソートして組み合わせを正規化

        // ゾロ目チェック
        if (nums[0] === nums[1] && nums[1] === nums[2]) {
            const key = `${nums[0]}${nums[1]}${nums[2]}`;
            tripleCounts[key] = (tripleCounts[key] || 0) + 1;
        }

        // 連番チェック (ソート後の連番、例: 123, 456)
        if (sortedNums[1] === sortedNums[0] + 1 && sortedNums[2] === sortedNums[1] + 1) {
            const key = `${sortedNums[0]}${sortedNums[1]}${sortedNums[2]}`;
            sequenceCounts[key] = (sequenceCounts[key] || 0) + 1;
        }
        // 特殊な連番（901）もここで含めるならロジック追加が必要だが、ここではソート後連続のみ
        // ナンバーズ3の連番はストレートの形で判断するため、この判定は複雑
        // 例: 901 はボックスで連番だが、ストレートの連番としては扱わない
        // ここでは簡易的に、ソート後の連番のみをカウント
        // もし901, 019などを連番として含める場合は、別途ロジックが必要です

        // ペア数字チェック (XXY or XYY)
        const unique = new Set(nums);
        if (unique.size === 2) { // 2種類の数字からなる
            if (nums[0] === nums[1] && nums[1] !== nums[2]) { // 00X
                const key = `${nums[0]}${nums[0]}${nums[2]}`;
                pairCounts[key] = (pairCounts[key] || 0) + 1;
            } else if (nums[0] === nums[2] && nums[0] !== nums[1]) { // 0X0
                const key = `${nums[0]}${nums[1]}${nums[0]}`;
                pairCounts[key] = (pairCounts[key] || 0) + 1;
            } else if (nums[1] === nums[2] && nums[0] !== nums[1]) { // X00
                const key = `${nums[0]}${nums[1]}${nums[1]}`;
                pairCounts[key] = (pairCounts[key] || 0) + 1;
            }
        }
    });

    let html = `<h2>数字の組み合わせ傾向</h2>`;
    html += `<p>分析期間: ${formatDate(currentPeriodStartDate)} ～ ${formatDate(currentPeriodEndDate)}</p>`;

    html += `<h3>ゾロ目 (XXX)</h3>`;
    const sortedTriples = Object.entries(tripleCounts).sort(([,a],[,b]) => b - a);
    if (sortedTriples.length > 0) {
        html += `<ul>`;
        sortedTriples.forEach(([combo, count]) => {
            html += `<li><strong>${combo}</strong>: ${count}回</li>`;
        });
        html += `</ul>`;
    } else {
        html += `<p>この期間にゾロ目は出現していません。</p>`;
    }

    html += `<h3>連番 (ソート後のABC, BCDなど)</h3>`;
    const sortedSequences = Object.entries(sequenceCounts).sort(([,a],[,b]) => b - a);
    if (sortedSequences.length > 0) {
        html += `<ul>`;
        sortedSequences.forEach(([combo, count]) => {
            html += `<li><strong>${combo}</strong>: ${count}回</li>`;
        });
        html += `</ul>`;
    } else {
        html += `<p>この期間に連番は出現していません。</p>`;
    }

    html += `<h3>ペア数字 (XXY or XYY など)</h3>`;
    const sortedPairs = Object.entries(pairCounts).sort(([,a],[,b]) => b - a);
    if (sortedPairs.length > 0) {
        html += `<ul>`;
        sortedPairs.forEach(([combo, count]) => {
            html += `<li><strong>${combo}</strong>: ${count}回</li>`;
        });
        html += `</ul>`;
    } else {
        html += `<p>この期間にペア数字は出現していません。</p>`;
    }

    analysisResultDiv.innerHTML = html;
}

// =========================================================
// 3. 直近で出ていない数字（冷え数字）
// =========================================================
function displayColdNumbers(data) {
    // 冷え数字は常に最新のデータセット（parsedData）の直近3ヶ月分で計算します。
    // showAnalysis関数内で既に`coldNumberData`としてフィルタリングされているので、それを使います。
    const recentDrawsCount = data.length; 

    const counts = Array(10).fill(0);
    data.forEach(draw => {
        draw.numbers.forEach(num => counts[num]++);
    });

    let html = `<h2>直近の冷え数字</h2>`;
    html += `<p>分析期間: ${formatDate(data[0].date)} ～ ${formatDate(data[data.length - 1].date)} (全 <strong>${recentDrawsCount}</strong> 回) のデータに基づきます。</p>`;
    html += `<p>※この分析は常に全学習データ中の直近3ヶ月分を使用しており、期間選択ボタンの影響を受けません。</p>`;
    html += `<p>※あくまで直近の傾向であり、将来の出現を保証するものではありません。</p>`;

    const sortedCounts = counts.map((count, index) => ({ number: index, count: count }))
                               .sort((a, b) => a.count - b.count); // 出現回数が少ない順

    html += `<table>
                <thead>
                    <tr>
                        <th>数字</th>
                        <th>出現回数 (直近 ${recentDrawsCount}回)</th>
                    </tr>
                </thead>
                <tbody>`;
    sortedCounts.forEach(item => {
        html += `<tr>
                    <td>${item.number}</td>
                    <td>${item.count}</td>
                </tr>`;
    });
    html += `</tbody></table>`;
    analysisResultDiv.innerHTML = html;
}

// =========================================================
// 4. 奇数／偶数の割合とパターン
// =========================================================
function displayOddEvenRatio(data) {
    let oddEvenPatterns = {
        '奇数3つ (OOO)': 0,
        '偶数3つ (EEE)': 0,
        '奇数2つ・偶数1つ (OOE)': 0,
        '奇数1つ・偶数2つ (OEE)': 0
    };

    data.forEach(draw => {
        let oddCount = 0;
        let evenCount = 0;
        draw.numbers.forEach(num => {
            if (num % 2 === 0) {
                evenCount++;
            } else {
                oddCount++;
            }
        });

        if (oddCount === 3) {
            oddEvenPatterns['奇数3つ (OOO)']++;
        } else if (evenCount === 3) {
            oddEvenPatterns['偶数3つ (EEE)']++;
        } else if (oddCount === 2 && evenCount === 1) {
            oddEvenPatterns['奇数2つ・偶数1つ (OOE)']++;
        } else if (oddCount === 1 && evenCount === 2) {
            oddEvenPatterns['奇数1つ・偶数2つ (OEE)']++;
        }
    });

    const totalDraws = data.length;
    let html = `<h2>奇数／偶数パターン</h2>`;
    html += `<p>分析期間: ${formatDate(currentPeriodStartDate)} ～ ${formatDate(currentPeriodEndDate)} (全 ${totalDraws} 回)</p>`;

    html += `<table>
                <thead>
                    <tr>
                        <th>パターン</th>
                        <th>出現回数</th>
                        <th>割合 (%)</th>
                    </tr>
                </thead>
                <tbody>`;
    for (const pattern in oddEvenPatterns) {
        const count = oddEvenPatterns[pattern];
        const percentage = ((count / totalDraws) * 100).toFixed(2);
        html += `<tr>
                    <td>${pattern}</td>
                    <td>${count}</td>
                    <td>${percentage}%</td>
                </tr>`;
    }
    html += `</tbody></table>`;
    analysisResultDiv.innerHTML = html;

    // グラフの描画
    const canvas = document.createElement('canvas');
    canvas.id = 'oddEvenChart';
    analysisResultDiv.appendChild(canvas);

    currentChart = new Chart(canvas, {
        type: 'pie',
        data: {
            labels: Object.keys(oddEvenPatterns),
            datasets: [{
                data: Object.values(oddEvenPatterns),
                backgroundColor: [
                    'rgba(255, 99, 132, 0.7)', // 赤系 (奇数3つ)
                    'rgba(54, 162, 235, 0.7)', // 青系 (偶数3つ)
                    'rgba(255, 206, 86, 0.7)', // 黄色系 (奇数2つ・偶数1つ)
                    'rgba(75, 192, 192, 0.7)'  // 緑系 (奇数1つ・偶数2つ)
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                title: {
                    display: true,
                    text: '奇数／偶数パターン分布'
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            let label = context.label || '';
                            if (label) {
                                label += ': ';
                            }
                            if (context.parsed !== null) {
                                label += context.parsed + '回 (' + (context.parsed / totalDraws * 100).toFixed(2) + '%)';
                            }
                            return label;
                        }
                    }
                }
            }
        }
    });
}

// =========================================================
// 5. 合計値の分布と偏り
// =========================================================
function displaySumDistribution(data) {
    const sumCounts = Array(28).fill(0); // 合計値は0から27まで (0+0+0=0, 9+9+9=27)

    data.forEach(draw => {
        const sum = draw.numbers.reduce((acc, val) => acc + val, 0);
        sumCounts[sum]++;
    });

    const totalDraws = data.length;
    let html = `<h2>合計値の分布と偏り</h2>`;
    html += `<p>分析期間: ${formatDate(currentPeriodStartDate)} ～ ${formatDate(currentPeriodEndDate)} (全 ${totalDraws} 回)</p>`;

    html += `<table>
                <thead>
                    <tr>
                        <th>合計値</th>
                        <th>出現回数</th>
                        <th>割合 (%)</th>
                    </tr>
                </thead>
                <tbody>`;
    // 全ての合計値について表示（出現回数が0でも）
    for (let i = 0; i <= 27; i++) {
        const count = sumCounts[i];
        const percentage = ((count / totalDraws) * 100).toFixed(2);
        html += `<tr>
                    <td>${i}</td>
                    <td>${count}</td>
                    <td>${percentage}%</td>
                </tr>`;
    }
    html += `</tbody></table>`;
    analysisResultDiv.innerHTML = html;

    // グラフの描画
    const canvas = document.createElement('canvas');
    canvas.id = 'sumDistributionChart';
    analysisResultDiv.appendChild(canvas);

    currentChart = new Chart(canvas, {
        type: 'bar',
        data: {
            labels: Array.from({ length: 28 }, (_, i) => i), // 0から27
            datasets: [{
                label: '出現回数',
                data: sumCounts,
                backgroundColor: 'rgba(255, 159, 64, 0.7)',
                borderColor: 'rgba(255, 159, 64, 1)',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: '出現回数'
                    }
                },
                x: {
                    title: {
                        display: true,
                        text: '合計値'
                    }
                }
            },
            plugins: {
                legend: {
                    display: false
                },
                title: {
                    display: true,
                    text: '合計値の分布'
                }
            }
        }
    });
}

// =========================================================
// 6. よく出ている下二桁、または桁ごとの傾向
// =========================================================
function displayLastTwoDigitsAndDigitTrends(data) {
    const lastTwoDigitsCounts = {}; // 下二桁
    const hundredsCounts = Array(10).fill(0); // 百の位
    const tensCounts = Array(10).fill(0);    // 十の位
    const onesCounts = Array(10).fill(0);    // 一の位

    data.forEach(draw => {
        const lastTwo = `${draw.numbers[1]}${draw.numbers[2]}`;
        lastTwoDigitsCounts[lastTwo] = (lastTwoDigitsCounts[lastTwo] || 0) + 1;

        hundredsCounts[draw.numbers[0]]++;
        tensCounts[draw.numbers[1]]++;
        onesCounts[draw.numbers[2]]++;
    });

    let html = `<h2>下二桁／桁ごとの傾向</h2>`;
    html += `<p>分析期間: ${formatDate(currentPeriodStartDate)} ～ ${formatDate(currentPeriodEndDate)}</p>`;

    html += `<h3>よく出ている下二桁</h3>`;
    const sortedLastTwoDigits = Object.entries(lastTwoDigitsCounts)
                                      .sort(([, a], [, b]) => b - a)
                                      .slice(0, 20); // 上位20件を表示

    if (sortedLastTwoDigits.length > 0) {
        html += `<table>
                    <thead>
                        <tr>
                            <th>下二桁</th>
                            <th>出現回数</th>
                        </tr>
                    </thead>
                    <tbody>`;
        sortedLastTwoDigits.forEach(([combo, count]) => {
            html += `<tr>
                        <td>${combo}</td>
                        <td>${count}</td>
                    </tr>`;
        });
        html += `</tbody></table>`;
    } else {
        html += `<p>この期間にデータがありません。</p>`;
    }

    html += `<h3>桁ごとの出現傾向</h3>`;
    html += `<p>特定の位で出やすい／出にくい数字の傾向です。</p>`;

    // 百の位
    const sortedHundreds = hundredsCounts.map((count, index) => ({ number: index, count: count }))
                                         .sort((a, b) => b.count - a.count);
    html += `<h4>百の位</h4>`;
    html += `<ul>`;
    sortedHundreds.forEach(item => {
        html += `<li>${item.number}: ${item.count}回</li>`;
    });
    html += `</ul>`;

    // 十の位
    const sortedTens = tensCounts.map((count, index) => ({ number: index, count: count }))
                                 .sort((a, b) => b.count - a.count);
    html += `<h4>十の位</h4>`;
    html += `<ul>`;
    sortedTens.forEach(item => {
        html += `<li>${item.number}: ${item.count}回</li>`;
    });
    html += `</ul>`;

    // 一の位
    const sortedOnes = onesCounts.map((count, index) => ({ number: index, count: count }))
                                 .sort((a, b) => b.count - a.count);
    html += `<h4>一の位</h4>`;
    html += `<ul>`;
    sortedOnes.forEach(item => {
        html += `<li>${item.number}: ${item.count}回</li>`;
    });
    html += `</ul>`;

    analysisResultDiv.innerHTML = html;
}


// ヘルパー関数: 日付フォーマット
function formatDate(date) {
    if (!date) return "N/A"; // Dateオブジェクトがnull/undefinedの場合の対応
    const yyyy = date.getFullYear();
    const mm = String(date.getMonth() + 1).padStart(2, '0');
    const dd = String(date.getDate()).padStart(2, '0');
    return `${yyyy}年${mm}月${dd}日`;
}